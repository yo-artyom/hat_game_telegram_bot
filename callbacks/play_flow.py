from re import sub
from random import choice
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

from player.factory import PlayerFactory
from repositories.game import GameRepository
from game.round_finisher import RoundFinisher
from game_round.lock import Lock
import callbacks.helpers.game as helpers

def start_play(bot, game):
    helpers.send_message_to_all_players(bot, game, '–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! üëí')
    helpers.send_message_to_all_players(bot, game, __play_rules())
    helpers.send_keyboard_to_all_players(bot, game,
                                        text="–¢—É—Ç –±—É–¥–µ—Ç —Å–ª–æ–≤–æ", keyboard=__wait_keyboard())

def start_show(update, context):
    game, game_round, player, showing_player, query = __set_env(update)

    if not Lock().free:
        query.edit_message_text(f'–ù–µ—Ç, —Å–µ–π—á–∞—Å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç {showing_player.name}', reply_markup=__wait_keyboard())
        return

    Lock().obtain(player)

    if not game_round.finished():
        word = game_round.random_word()
        query.edit_message_text(text=word, reply_markup=__play_word_keyboard(word))
    else:
        __finish_round(context.bot, game)

def word_guessed(update, context):
    print(f"WORD GUESSED {update.callback_query.data}")

    game, game_round, player, showing_player, query = __set_env(update)

    guessed_word = sub("guessed_", "", update.callback_query.data)
    game_round.guess_word(guessed_word)
    game.scoreboard.increase_score(player)

    if not game_round.finished():
        word = game_round.random_word()
        #   we don't want to show the same word again
        while word == guessed_word:
            word = game_round.random_word()

        query.edit_message_text(text=word, reply_markup=__play_word_keyboard(word))
    else:
        __finish_round(context.bot, game)

def timeoff_word_guessed(update, context):
    game, game_round, player, showing_player, query = __set_env(update)

    Lock().release()

    guessed_word = sub("guessed_timeoff_", "", update.callback_query.data)
    game_round.guess_word(guessed_word)
    game.scoreboard.increase_score(showing_player)

    if not game_round.finished():
        query.edit_message_text(text=__motivation_text(), reply_markup=__wait_keyboard())
    else:
        __finish_round(context.bot, game)

def timeoff(update, context):
    game, game_round, player, showing_player, query = __set_env(update)
    Lock().release()
    query.edit_message_text(text=__motivation_text(), reply_markup=__wait_keyboard())


def __wait_keyboard():
    keyboard = [[InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–≤–∞! üëÄ", callback_data='word')]]
    return InlineKeyboardMarkup(keyboard)

def __play_word_keyboard(word):
    keyboard = [
        [InlineKeyboardButton("–°–ª–æ–≤–æ —É–≥–∞–¥–∞–Ω–æ üéâ", callback_data=f"guessed_{word}")],
        [InlineKeyboardButton("–í—Ä–µ–º—è, —É–≥–∞–¥–∞–Ω–æ ‚òëÔ∏è", callback_data=f"guessed_timeoff_{word}"),
         InlineKeyboardButton("–í—Ä–µ–º—è, –Ω–µ—É–≥–∞–¥–∞–Ω–æ ‚ùå", callback_data='timeoff')]
    ]
    return InlineKeyboardMarkup(keyboard)

def __play_rules():
    return '–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏–≥—Ä—ã —Å–æ –º–Ω–æ–π ü§ñ\n'\
            '\n'\
            '–Ø –µ—â–µ –Ω–µ —É–º–µ—é —Å–ª–µ–¥–∏—Ç—å –∑–∞ –≤—Ä–µ–º–µ–Ω–µ–º, –ø–æ—ç—Ç–æ–º—É –æ—Ç–∫—Ä—ã–≤–∞–π—Ç–µ —Ç–∞–π–º–µ—Ä—ã –≤ —Ç–µ–ª–µ—Ñ–æ–Ω—á–∏–∫–∞—Ö ‚è≤\n'\
            '\n'\
            '–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–∞ –∫–æ–º–∞–Ω–¥—ã (–ì–µ—Ä–∞ –Ω–µ –Ω–∞–ø–∏—Å–∞–ª –¥–ª—è –º–µ–Ω—è —ç—Ç—É —á–∞—Å—Ç—å –∫–æ–¥–∞, –ø–æ—ç—Ç–æ–º—É –¥–µ–ª–∏—Ç–µ—Å—å –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç —Å–∞–π—Ç). –ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞, –ø—É—Å—Ç—å –æ–¥–∏–Ω –∏–∑ –µ—ë –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞–∂–º—ë—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É ‚Äú–ø–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–≤–∞!‚Äù\n' \
            '\n'\
            '–ï—Å–ª–∏ —Å–ª–æ–≤–æ —É–≥–∞–¥–∞–Ω–æ ‚Äî –Ω–∞–∂–∏–º–∞–π—Ç–µ ‚Äú—Å–ª–æ–≤–æ —É–≥–∞–¥–∞–Ω–æ üéâ‚Äù\n' \
            '–ö–æ–≥–¥–∞ –≤—Ä–µ–º—è –≤—ã—à–ª–æ ‚Äî –Ω–∞–∂–∏–º–∞–π—Ç–µ ‚Äú–≤—Ä–µ–º—è, —É–≥–∞–¥–∞–Ω–æ ‚òëÔ∏è‚Äù, –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ —É–≥–∞–¥–∞–Ω–æ –∏ ‚Äú–≤—Ä–µ–º—è, –Ω–µ—É–≥–∞–¥–∞–Ω–æ ‚ùå‚Äù, –µ—Å–ª–∏ –Ω–µ—Ç.\n'\
            '\n'\
            '–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –∑–∞–∫–æ–Ω—á–∞—Ç—Å—è –≤—Å–µ —Å–ª–æ–≤–∞, –≤—ã —É–≤–∏–¥–µ—Ç–µ —Å—á—ë—Ç, –∏ –Ω–∞—á–Ω–µ—Ç—Å—è –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥'

def __motivation_text():
    return choice(["–ö–ª–∞—Å", "–•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞, –û–ª–µ–≥", "–°—É–ø–µ—Ä", "–ë—ã–ª–æ –≤–µ—Å–µ–ª–æ"])

def __set_env(update):
    player = PlayerFactory.from_tg_callback(update)
    game = GameRepository().find_by_player(player)
    game_round = game.active_round()
    query = update.callback_query
    showing_player = Lock().blocked_by

    return game, game_round, player, showing_player, query

def __finish_round(bot, game):
    new_round = RoundFinisher(game).call()
    Lock().release()

    helpers.send_message_to_all_players(bot, game, '–†–∞—É–Ω–¥ –∑–∞–∫–æ–Ω—á–µ–Ω! üåö')
    helpers.send_message_to_all_players(bot, game, helpers.pretty_scoreboard_text(game))
    helpers.send_keyboard_to_all_players(bot, game,
                                        text=f"–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ä–∞—É–Ω–¥ {game.active_round().number} üß¢",
                                        keyboard=__wait_keyboard())
